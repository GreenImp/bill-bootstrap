/**
 * Author: GreenImp Web
 * Date Created: 27/01/13 01:42
 */

(function($, window, document){
	// list of available methods
	var methods = {
		init:function(options){
			return this;
		}
	};

	/**
	 * Base Bill method
	 *
	 * @param method
	 * @return {*}
	 */
	$.fn.bill = function(method){
		// Method calling logic
		if(methods[method]){
			return methods[ method ].apply(this, Array.prototype.slice.call(arguments, 1));
		}else if(typeof method === 'object' || !method){
			return methods.init.apply(this, arguments);
		}else{
			$.error('Method ' +  method + ' does not exist on bill');
			return this;
		}
	};

/**
 * Checks if the current browser is supported.
 * If not, a message is displayed to the user,
 * to alert them that they are using an out-dated
 * browser.
 *
 * 'options' contains a list of browsers and the
 * earliest supported version number.
 * By default, ie support is set to 9.
 * All others have full support.
 *
 * @param options
 * @return {*}
 */
methods.browserNotice = function(options){
	// list of browsers to check for
	options = $.extend({
		ie:9,
		ff:null,
		chrome:null,
		safari:null,
		opera:null
	}, options);

	// check if the browser is supported or not
	var supported = true,
		userAgent = navigator.userAgent;
	if(options.ie && !isNaN(options.ie) && (/MSIE (\d+\.\d+);/.test(userAgent))){
		// browser is IE
		if(parseFloat(RegExp.$1) < parseFloat(options.ie)){
			// version not supported
			supported = false;
		}
	}else if(options.ff && !isNaN(options.ff) && (/Firefox[\/\s](\d+\.\d+)/.test(userAgent))){
		// browser is Firefox
		if(parseFloat(RegExp.$1) < parseFloat(options.ff)){
			// version not supported
			supported = false;
		}
	}else if(options.chrome && !isNaN(options.chrome) && (/Chrome[\/\s](\d+\.\d+)/.test(userAgent))){
		// browser is Chrome
		if(parseFloat(RegExp.$1) < parseFloat(options.chrome)){
			// version not supported
			supported = false;
		}
	}else if(options.safari && !isNaN(options.safari) && (/Version[\/\s](\d+\.\d+)(.\d+)*\s+Safari/.test(userAgent))){
		// browser is Safari
		if(parseFloat(RegExp.$1) < parseFloat(options.safari)){
			// version not supported
			supported = false;
		}
	}else if(options.opera && !isNaN(options.opera) && (/Opera.*?Version[\/\s](\d+\.\d+)/.test(userAgent))){
		// browser is Opera
		if(parseFloat(RegExp.$1) < parseFloat(options.opera)){
			// version not supported
			supported = false;
		}
	}

	if(!supported){
		// browser not supported
		var animSpeed = 600,
			noticeBox = $('<div id="browserNotice" class="container">' +
			'<div class="row">' +
				'<div class="column eight">' +
					'<p>It looks like you\'re using an outdated web browser. We don\'t support old browsers, as they have limited features and security issues.</p>' +
					'<p>You should consider upgrading.</p>' +
				'</div>' +
				'<div class="column four">' +
					'<a href="http://browsehappy.com/" title="Upgrade your browser at Browse Happy" target="_blank"  class="button">Find out more</a>' +
				'</div>' +
			'</div>' +
		'</div>');

		$('body')
				// add the browser notice
				.prepend(noticeBox)
				// slide the whole page down, by the height of the notice (so page content doesn't get cut off)
				.animate({'padding-top':noticeBox.outerHeight()}, animSpeed);

		// slide the browser notice into view
		noticeBox.hide().slideDown(animSpeed);
	}

	// return 'this' to allow chain-ability
	return this;
};
/**
 * Adds accordion functionality
 *
 * @return {*}
 */
methods.accordion = function(userOptions){
	var defaultOptions = {
		animSpeed:200,
		animType:'slide',
		collapsible:false,
		accordion:true
	};
	var options = $.extend(defaultOptions, userOptions);

	// loop through each element and add the accordion functionality
	// return 'this' to allow chain-ability
	return this.each(function(){
		var accordion = $(this),			// the accordion element
			data = accordion.data('bill');	// the accordion data

		// only add the accordion if it hasn't already been initiated on the object
		if(!data || !data.accordion){
			var titles = accordion.find('.title'),	// get the titles
				panes = null;						// hold a reference to the panes

			if(titles.length == 0){
				// no elements with class 'title' defined
				// loop through until we find a heading tag
				for(var i = 1; i <= 6; i++){
					titles = accordion.find('h' + i);
					if(titles.length > 0){
						i = 7;
					}
				}

				if(titles.length == 0){
					// still no titles found - end the element loop
					$.error('No title elements found on bill.accordion object');
					return this;
				}
			}

			// loop through each title and fine it's content pane
			titles.each(function(){
				var title = $(this),
					pane = title.next('.content');
				if(pane.length == 0){
					pane = title.next();

					if(pane.length == 0){
						// no pane found - end the title loop
						return false;
					}
				}

				// add the pane to the list
				panes = (panes == null) ? pane : panes.add(pane);
			});

			if(!panes || (panes.length != titles.length)){
				// number of panes doesn't match the number of titles
				$.error('Number of content panes doesn\'t match title count on bill.accordion object');
				return this;
			}

			// set the accordion data
			accordion.data('bill', $.extend(data || {}, {accordion:options}));

			// hide all of the panes
			panes.addClass('content').hide();

			/**
			 * Adds the click handler for title elements
			 */
			titles.addClass('title').on('click', function(){
				var title = $(this),
					pane = $(panes.get(titles.index(title)));

				// stop any active animation
				pane.stop(true, true);

				if(title.hasClass('active')){
					// panel is already active
					if(options.collapsible){
						title.removeClass('active');

						if(options.animType){
							switch(options.animType){
								case 'fade':
									pane.fadeOut(options.animSpeed);
								break;
								default:
									pane.slideUp(options.animSpeed);
								break;
							}
						}else{
							pane.hide();
						}
					}
				}else{
					// panel not active
					if(options.accordion){
						titles.removeClass('active');
					}
					title.addClass('active');

					if(options.animType){
						switch(options.animType){
							case 'fade':
								if(options.accordion){
									panes.hide();
								}
								pane.fadeIn(options.animSpeed);
							break;
							default:
								if(options.accordion){
									panes.not(pane).slideUp(options.animSpeed);
								}
								pane.slideDown(options.animSpeed);
							break;
						}
					}else{
						pane.show();
					}
				}

				return false;
			});

			// if accordion is not collapsible, we must always have one pane open
			// trigger the click event on the first element
			if(!options.collapsible){
				$(titles.get(0)).triggerHandler('click');
			}
		}else if(userOptions){
			// accordion already exists, but options have been updated
			accordion.data('bill', $.extend(data || {}, {accordion:options}));
		}
	});
};

// call the accordion functionality
$('.accordion').bill('accordion');
})(jQuery, window, document);