/**
 * Author: GreenImp Web
 * Date Created: 27/01/13 01:42
 */

if(typeof jQuery === 'undefined'){
	// jQuery is not defined
	throw new TypeError('jQuery is not defined', 'bill.js', 8);
}

(function($, window, document, undefined){
	'use strict';

	/**
	 * Base Bill Framework
	 */
	window.Bill = {
		name:'Bill-bootstrap',	// framework name
		version:'0.1.0',		// version number
		eventNameSpace:'.bill',	// namespace used for events
		libs:{},				// list of available libraries
		log:{},
		/**
		 * Initialises the Framework
		 *
		 * @param scope
		 * @param libraries
		 * @param method
		 * @param options
		 */
		init:function(scope, libraries, method, options){
			var libResponse = [],	// list of library load responses
				args = [			// list of arguments to apply to libraries
					scope, method, options
				];

			// set global scope (used in the libraries)
			this.scope = scope || this.scope;

			if(libraries && (typeof libraries === 'string')){
				// split the libraries by space (to get each supplied library) and loop through them
				$.each(libraries.split(' '), function(i, lib){
					// add the library to the list
					libResponse.push(Bill.initLibrary(lib, args));
				});
			}else{
				// no libraries specified - load them all
				$.each(this.libs, function(i, lib){
					// add the library to the list
					libResponse.push(Bill.initLibrary(lib, args));
				});

				if(typeof libraries === 'function'){
					// if the first argument is actually a callback (not library),
					// add to the arguments list
					args.unshift(libraries);
				}
			}

			// TODO - check responses
		},
		/**
		 * Initialises the given library
		 *
		 * @param lib
		 * @param args
		 * @returns {*}
		 */
		initLibrary:function(lib, args){
			return this.catchLib(function(){
				// check if the library exists
				if(this.libs.hasOwnProperty(lib)){
					// define the correct library scope
					this.libs[lib].scope = this.scope;

					// initialise the library and return
					return this.libs[lib].init.apply(this.libs[lib], args);
				}
			}.bind(this), lib);
		},
		/**
		 * Error handling for library loading
		 *
		 * @param func
		 * @param lib
		 * @returns {*}
		 */
		catchLib:function(func, lib){
			try{
				return func();
			}catch(e){
				return this.error({
					name:lib,
					message:'could not be initialized',
					file:'bill.js',
					e:e.name + ' ' + e.message
				});
			}
		},
		error:function(e){
			// build the message
			var msg = e.name + ' ' + e.message + (e.e ? '; ' + e.e : '') + (e.file ? '; ' + e.file + (e.line ? ' - ' + e.line : '') : '');

			// add the message to the log
			this.log.error = this.log.error || [];
			this.log.error.push(msg);

			// return the message
			return msg;
		},
		/**
		 * De-activates plugins
		 */
		off:function(){
			$(this.scope).off(this.eventNameSpace);
			$(window).off(this.eventNameSpace);
		}
	};

	/**
	 * Define Bill jQuery plugin
	 * @returns {*}
	 */
	$.fn.bill = function(){
		// get the arguments
		var args = Array.prototype.slice.call(arguments, 0);

		// loop through each element and apply Bill
		// return this, to retain chain-ability
		return this.each(function(){
			Bill.init.apply(Bill, [this].concat(args));
			return this;
		});
	};
})(jQuery, window, document);

/**
 * Basic functionality
 */
/**
 * Author: GreenImp
 * Date Created: 19/03/2013 10:44
 */

/**
 * jQuery extension functions
 */
$.extend({
	/**
	 * Adds jQuery function for getting the URL query strings.
	 * If `name` is defined, then it will return that named value
	 *
	 * @param name
	 * @returns {*}
	 */
	getQueryString:function(name){
		var queryString = window.location.search.substr(1);
		if(!queryString){
			// no query string
			return name ? null : {};
		}

		// check for a cached query string
		var cache = $(window).data('queryString');
		cache = $.extend(cache, {}); // ensure that the cache is an object

		if(!cache[queryString]){
			// no cache exists for the current query string

			// get the query string and split by &
			var queryVars = queryString.split('&'),
				arrayCheck = /^([^\[]+)((\[[^\]]*\])+)$/,
				arrayKeyCheck = /\[[^\]]*\]/g;

			// the query string variable
			cache[queryString] = {};

			// loop through each key=>value pair
			for(var i = 0; i < queryVars.length; i++){
				if(queryVars[i]){
					var variable = queryVars[i].split('='),
						key = decodeURIComponent(variable[0]),
						value = (typeof variable[1] == 'string') ? decodeURIComponent(variable[1].replace(/\+/g, ' ')) : undefined;

					// check if the key is an array
					if(arrayCheck.test(key)){
						// key is an array
						key = RegExp.$1;	// the key

						// ensure that they key is initialised as a variable of the cache
						cache[queryString][key] = cache[queryString][key] || {length: 0};

						var arrayNames = '',							// string of previous array key names
							arrays = RegExp.$2.match(arrayKeyCheck),	// list of array key names
							arrayLen = arrays.length;					// count of array key names
						// loop through the array key names and create the variables
						$.each(arrays, function(i, subKey){
							// determine the key name - if it is a string, we use it, if it is empty we calculate the numeric number, from the current array length
							subKey = (subKey && (subKey != '[]')) ? '"' + subKey.replace(/\[|\]/g, '') + '"' : eval('cache[queryString][key]' + arrayNames + '.length');

							// create the variable - I KNOW that using eval is horrible, but it's the best solution I could come up with quickly.
							eval('cache[queryString][key]' + arrayNames + '[' + subKey + '] = cache[queryString][key]' + arrayNames + '[' + subKey + '] || ' + ((i+1 == arrayLen) ? 'value' : '[]'));

							// add the array key to the list
							arrayNames += !isNaN(subKey) ? '' : '[' + subKey + ']';
						});

						//cache[queryString][key][RegExp.$2 ? RegExp.$2 : cache[queryString][key].length] = value;
						cache[queryString][key].length++;
					}else{
						cache[queryString][key] = value;
					}
				}
			}

			// cache the result
			$(window).data('queryString', cache);
		}

		return name ? cache[queryString][name] : cache[queryString];
	},
	/**
	 * Returns the viewport size
	 *
	 * @returns {{width: number, height: number}}
	 */
	viewport:function(){
		var $window = $(window);

		return {
			width:Math.max($window.innerWidth(), window.innerWidth),
			height:Math.max($window.innerHeight(), window.innerHeight)
		}
	}
});

/**
 * Console failsafe, to stop errors when console is unavailable
 * http://paulirish.com/2008/graceful-degredation-of-your-firebug-specific-code/
 */
if(!('console' in window)){
	var names = [
		'assert',
		'count',
		'debug',
		'dir',
		'dirxml',
		'error',
		'group',
		'groupEnd',
		'info',
		'log',
		'profile',
		'profileEnd',
		'time',
		'timeEnd',
		'trace',
		'warn'
	];
    window.console = {};
    for(var i = 0; i < names.length; i++){
		window.console[names[i]] = function(){};
	}
}




/* ==========================================================================
 * String Functions
 * ========================================================================== */

/**
 * Allows padding of the string.
 * Default pad type is right.
 *
 * @param input
 * @param length
 * @param type
 * @returns {string}
 */
String.prototype.pad = function(input, length, type){
	if((type == 'l') || (type == 'left')){
		// pad left
		return (new Array(length+1).join(input)+this).slice(-length);
	}else{
		// pad type not left - assume right
		return (this+new Array(length+1).join(input)).slice(0,length);
	}
};

/**
 * Left pads the string
 *
 * @param input
 * @param length
 * @returns {string}
 */
String.prototype.lPad = function(input, length){
	return this.pad(input, length, 'l');
};

/**
 * Right pads the string
 *
 * @param input
 * @param length
 * @returns {string}
 */
String.prototype.rPad = function(input, length){
	return this.pad(input, length, 'r');
};


/**
 * Trims the string.
 * Default trim type is both.
 *
 * @param input
 * @param type
 * @returns {string}
 */
String.prototype.trim = function(input, type){
	input = input || '\s';
	type = ((type == 'l') || (type == 'left')) ? 'l' : (((type == 'r') || (type == 'right')) ? 'r' : 'b');

	return this.replace(new RegExp(((type != 'r') ? '^[' + input + ']+' : '') + ((type == 'b') ? '|' : '') + ((type != 'l') ? '[' + input + ']+$' : ''), 'g'), '');
};

/**
 * Left trims the string
 *
 * @param input
 * @returns {string}
 */
String.prototype.lTrim = function(input){
	return this.trim(input, 'l');
};

/**
 * Right trims the string
 *
 * @param input
 * @returns {string}
 */
String.prototype.rTrim = function(input){
	return this.trim(input, 'r');
};



/* ==========================================================================
 * Array Functions
 * ========================================================================== */

/*
 * Array max function,
 * returns the highest number, in the array
 *
 * Used like:
 *
 * `var myArray = [1, 10, 458, 12],
 * 	max = myArray.max();
 * console.log(max); // outputs 458`
 */
Array.prototype.max = function(){
	return Math.max.apply(null, this)
};

/*
 * Array min function,
 * returns the lowest number, in the array
 *
 * Used like:
 *
 * `var myArray = [1, 10, 458, 12],
 * 	min = myArray.min();
 * console.log(min); // outputs 1`
 */
Array.prototype.min = function(){
	return Math.min.apply(null, this)
};

/*
 * Array sum function,
 * returns the sum total of all values, in the array
 *
 * Used like:
 *
 * `var myArray = [1, 10, 458, 12],
 * 	sum = myArray.sum();
 * console.log(sum); // outputs 481`
 */
Array.prototype.sum = function(){
	var length = this.length,
	sum = 0;
	for(var i = 0; i < length; i++){
		sum += parseFloat(this[i]);
	}

	return sum;
};



/* ==========================================================================
 * Object Functions
 * ========================================================================== */

// check if browser supports Object.defineProperty
var hasDefineProperty = (typeof Object.defineProperty == 'function');
try{
	// try and add a property
	Object.defineProperty({}, 'propTest', {});
}catch(e){
	// adding property failed
	hasDefineProperty = false;
}

if(hasDefineProperty){
	/**
	 * Checks if the given object is equal
	 * to (same as) the current object.
	 *
	 * @param obj
	 * @returns {boolean}
	 */
	Object.defineProperty(Object.prototype, 'equals', {
		value:function(obj){
			var i;
			for(i in this){
				if(typeof(obj[i])=='undefined'){
					return false;
				}
			}

			for(i in this){
				if(this[i]){
					switch(typeof(this[i])){
						case 'object':
							if(!this[i].equals(obj[i])){
								return false;
							}
						break;
						case 'function':
							if(
								typeof(obj[i]) == 'undefined' ||
								(i != 'equals' && this[i].toString() != obj[i].toString())
							){
								return false;
							}
						break;
						default:
							if(this[i] != obj[i]){
								return false;
							}
						break;
					}
				}else{
					if (obj[i])
					return false;
				}
			}

			for(i in obj){
				if(typeof(this[i]) == 'undefined'){
					return false;
				}
			}

			return true;
		  }
	});
}
/**
 * Bill.browserNotice
 *
 * Checks if the current browser is supported.
 * If not, a message is displayed to the user,
 * to alert them that they are using an out-dated
 * browser.
 *
 * Yes, browser sniffing is BAD, but sometimes you
 * seriously, just don't want to provide support
 * for a certain browser (IE 8<, for example).
 *
 * 'options' contains a list of browsers and the
 * earliest supported version number.
 * By default, ie support is set to 9.
 * All others have full support.
 */
;(function($, window, document, undefined){
	"use strict";

	Bill.libs.browserNotice = {
		name:'Browser Notice',
		version:'0.1.0',
		options:{
			browsers:{
				ie:9,
				ff:null,
				chrome:null,
				safari:null,
				opera:null
			},
			animSpeed:600,
			infoURL:'http://browsehappy.com/',
			closable:false
		},
		init:function(scope, method, options){
			this.scope = scope || this.scope;

			// only continue if the browser notice doesn't exist
			if(!this.options.init || !$('#browserNotice').length){
				if(typeof method === 'object'){
					// method is actually options
					$.extend(true, this.options, method);
				}else{
					$.extend(true, this.options, options);
				}

				// check if the browser is supported or not
				var supported = true,
					userAgent = navigator.userAgent,
					browsers = this.options.browsers;
				if(browsers.ie && !isNaN(browsers.ie) && (/MSIE (\d+\.\d+);/.test(userAgent))){
					// browser is IE
					if(parseFloat(RegExp.$1) < parseFloat(browsers.ie)){
						// version not supported
						supported = false;
					}
				}else if(browsers.ff && !isNaN(browsers.ff) && (/Firefox[\/\s](\d+\.\d+)/.test(userAgent))){
					// browser is Firefox
					if(parseFloat(RegExp.$1) < parseFloat(browsers.ff)){
						// version not supported
						supported = false;
					}
				}else if(browsers.chrome && !isNaN(browsers.chrome) && (/Chrome[\/\s](\d+\.\d+)/.test(userAgent))){
					// browser is Chrome
					if(parseFloat(RegExp.$1) < parseFloat(browsers.chrome)){
						// version not supported
						supported = false;
					}
				}else if(browsers.safari && !isNaN(browsers.safari) && (/Version[\/\s](\d+\.\d+)(.\d+)*\s+Safari/.test(userAgent))){
					// browser is Safari
					if(parseFloat(RegExp.$1) < parseFloat(browsers.safari)){
						// version not supported
						supported = false;
					}
				}else if(browsers.opera && !isNaN(browsers.opera) && (/Opera.*?Version[\/\s](\d+\.\d+)/.test(userAgent))){
					// browser is Opera
					if(parseFloat(RegExp.$1) < parseFloat(browsers.opera)){
						// version not supported
						supported = false;
					}
				}

				if(!supported){
					// browser not supported

					// build the browser notice
					$('<div id="browserNotice" class="notice info fixed"' + (this.options.closable ? ' data-close="1"' : '') + '>' +
						'<div class="container constrain">' +
							'<div class="row">' +
								'<div class="column ' + (this.options.infoURL ? 'eight' : 'twelve') + '">' +
									'<p>It looks like you\'re using an outdated web browser. We don\'t support old browsers, as they have limited features and security issues.</p>' +
									'<p>You should consider upgrading.</p>' +
								'</div>' +
								(
								this.options.infoURL ?
									'<div class="column four">' +
										'<a href="' + this.options.infoURL + '" title="Upgrade your browser" target="_blank" class="button">Find out more</a>' +
									'</div>'
									:
									''
								) +
							'</div>' +
						'</div>' +
					'</div>')
							// add the notice and slide it into view
							.prependTo('body').hide().slideDown(this.options.animSpeed);
				}

				this.options.init = true;
			}

			return this.options.init;
		}
	};
})(jQuery, window, document);
/**
 * Bill.cookieNotice
 *
 * Checks if the browser supports cookies.
 * If not, a message is displayed to the user.
 */
;(function($, window, document, undefined){
	"use strict";

	Bill.libs.cookieNotice = {
		name:'Cookie Notice',
		version:'0.1.0',
		options:{
			animSpeed:600,
			infoURL:'http://www.whatarecookies.com/',
			closable:true
		},
		init:function(scope, method, options){
			// only continue if cookies aer disabled
			if(!this.cookiesEnabled()){
				this.scope = scope || this.scope;

				// only continue if the cookie notice doesn't exist
				if(!this.options.init || !$('#cookieNotice').length){
					if(typeof method === 'object'){
						// method is actually options
						$.extend(true, this.options, method);
					}else{
						$.extend(true, this.options, options);
					}

					$('<div id="cookieNotice" class="notice info fixed"' + (this.options.closable ? ' data-close="1"' : '') + '>' +
						'<div class="container constrain">' +
							'<div class="row">' +
								'<div class="column ' + (this.options.infoURL ? 'eight' : 'twelve') + '">' +
									'<p>' +
										'Your browser is blocking cookies. This website requires the use of cookies to work correctly.' +
									'</p>' +
								'</div>' +
								(
								this.options.infoURL ?
									'<div class="column four">' +
										'<a href="' + this.options.infoURL + '" title="Find out more about cookies" target="_blank" class="button">Find out more</a>' +
									'</div>'
									:
									''
								) +
							'</div>' +
						'</div>' +
					'</div>')
							// add the notice and slide it into view
							.prependTo('body').hide().slideDown(this.options.animSpeed);

					this.options.init = true;
				}
			}else{
				this.options.init = true;
			}

			return this.options.init;
		},
		/**
		 * Checks if cookies are enabled, in the browser.
		 * Returns true if they are, otherwise false
		 *
		 * @returns {boolean}
		 */
		cookiesEnabled:function(){
			var cookieName = 'cookieTest',					// test cookie name
				cookieEnabled = !!navigator.cookieEnabled;	// base check for cookie functionality

			if(!cookieEnabled){
				// base check failed - try setting a cookie
				document.cookie = cookieName;
				// check if the cookie was set
				cookieEnabled = (document.cookie.indexOf(cookieName) != -1);
			}

			return cookieEnabled;
		}
	};
})(jQuery, window, document);

/**
 * UI functionality
 */
/**
 * Bill.accordion
 *
 * Adds accordion functionality
 */
;(function($, window, document, undefined){
	"use strict";

	Bill.libs.accordion = {
		name:'Accordion',
		version:'0.1.0',
		nameSpace:Bill.eventNameSpace + '.accordion',
		options:{
			animSpeed:200,
			animType:'slide',
			collapsible:false,
			accordion:true
		},
		init:function(scope, method, options){
			this.scope = scope || this.scope;

			var lib = this,
				$elm = $(this.scope),
				data = $.extend($elm.data(this.nameSpace) || {}, this.options);

			if(typeof method === 'object'){
				// method is actually options
				$.extend(data, method);
			}else{
				$.extend(data, options);
			}

			// only continue if the accordion hasn't already been initialised
			if(!data.init){
				var type = $elm.prop('tagName').toUpperCase();	// get the accordion element type
				data.titles = null;
				data.panes = null;

				if(type == 'DL'){
					// for dl elements we look for `> dt` (for titles) and `> dd` (for panes)
					// we ignore `.title` and `.pane` classes, as dl elements already define their own title and data
					data.titles = $elm.children('dt');

					if(data.titles.length == 0){
						// no titles found - end the element loop
						Bill.error({
							name:this.name,
							message:'No title elements found on bill.accordion object',
							file:'accordion.js',
							line:42
						});
						return false;
					}

					// find the panes
					// loop through each title and find the next sibling
					// this will stop it from matching too many objects, as panes
					data.titles.each(function(){
						// add the pane to the list
						var pane = $(this).next('dd').addClass('pane');
						data.panes = (data.panes == null) ? pane : data.panes.add(pane);
					});
				}else{
					var queryPrefixTitle = '',
						queryPrefixPane = '';
					if((type == 'UL') || (type == 'OL')){
						// for ul/ol elements, we look for `> li > .title/.pane` elements
						// add a title prefix to match within the direct li child
						queryPrefixTitle = 'li > ';
					}

					// we look for `> .title/.pane`
					// if none found, look for `> h{1-6}` (for titles) and direct sibling (for panes)
					data.titles = $elm.find('> ' + queryPrefixTitle + '.title');
					if(data.titles.length == 0){
						// no titles found - check for h{1-6} elements

						// loop through until we find a heading tag - this gives us the highest number headers
						for(var i = 1; i <= 6; i++){
							data.titles = $elm.find('> ' + queryPrefixTitle + 'h' + i);
							if(data.titles.length > 0){
								// heading found - end the loop
								i = 7;
							}
						}

						if(data.titles.length == 0){
							// still no titles found - end the element loop
							Bill.error({
								name:this.name,
								message:'No title elements found on bill.accordion object',
								file:'accordion.js',
								line:85
							});
							return false;
						}
					}


					// find the panes
					// loop through each title
					data.titles.each(function(){
						// add the pane to the list
						// for the pane, we only match the element if it:
						// Has a class of `pane` or is a specific element type
						// and doesn't have a class of title
						var pane = $(this)
										.next(
											queryPrefixPane + '.pane, ' +
											queryPrefixPane + 'div:not(.title), ' +
											queryPrefixPane + 'article:not(.title), ' +
											queryPrefixPane + 'section:not(.title), ' +
											queryPrefixPane + 'aside:not(.title)'
										)
										.addClass('pane');
						data.panes = (data.panes == null) ? pane : data.panes.add(pane);
					});
				}

				// hide all of the panes
				data.panes.hide();

				// store the options in the element data
				$elm.data(this.nameSpace, data);

				this.on();

				data.init = true;
			}else{
				// store the options in the element data
				$elm.data(this.nameSpace, data);
			}

			return data.init;
		},
		/**
		 * Activates the plugin
		 */
		on:function(){
			var lib = this,
				data = $(this.scope).data(this.nameSpace);
			console.log(data);

			/**
			 * Adds the click handler for title elements
			 */
			data.titles
					.addClass('title')							// ensure that the titles have the `title` class
					.on('click' + lib.nameSpace, function(e){	// add the click event for displaying panes
						// stop the default click event
						e.preventDefault();

						var title = $(this),								// the title element
							pane = data.panes.eq(data.titles.index(title));	// the corresponding pane element

						// stop any active animation
						data.panes.stop(true, true);

						if(title.hasClass('active')){
							// panel is already active - collapse, if we are allowed
							if(data.collapsible){
								// remove the active class from the title
								title.removeClass('active');

								if(data.animType){
									// animate
									switch(data.animType){
										case 'fade':
											pane.fadeOut(data.animSpeed);
										break;
										default:
											pane.slideUp(data.animSpeed);
										break;
									}
								}else{
									// no animation - just hide
									pane.hide();
								}
							}
						}else{
							// panel not active
							if(data.accordion){
								// this is a true accordion - remove active class on all titles
								data.titles.removeClass('active');
							}
							// add the active class to the current title
							title.addClass('active');

							if(data.animType){
								switch(data.animType){
									// animate
									case 'fade':
										if(data.accordion){
											// true accordion - hide the other panes
											// we don't fade them out, otherwise it conflicts with
											// the position of the active pane
											data.panes.hide();
										}
										pane.fadeIn(data.animSpeed);
									break;
									default:
										if(data.accordion){
											// true accordion - hide the other panes
											data.panes.not(pane).slideUp(data.animSpeed);
										}
										pane.slideDown(data.animSpeed);
									break;
								}
							}else{
								// no animation - just show
								data.panes.hide();
								pane.show();
							}
						}
					});

			// if accordion is not collapsible, we must always have one pane open
			// trigger the click event on the first element
			if(!data.collapsible){
				var animType = data.animType,						// the current animation type
					activeTitle = data.titles.filter('.active:first');	// check for a button with class 'active'
				// if no tab buttons have a class of active, just go with the first tab
				activeTitle = !activeTitle.length ? data.titles.first() : activeTitle;

				// set no anim type, so that the tab appears immediately
				data.animType = null;

				// trigger the click event
				activeTitle.triggerHandler('click' + this.nameSpace);

				// reset the animation type
				data.animType = animType;
			}
		},
		/**
		 * De-activates the plugin
		 */
		off:function(){
			$(this.scope).data(this.nameSpace).titles.off('click' + this.nameSpace);
		}
	};
})(jQuery, window, document);